#include <TinyGPS++.h>
#include <SoftwareSerial.h>
int RXPin = 5;
int TXPin = 4;
TinyGPSPlus gps;
SoftwareSerial SerialGPS(RXPin, TXPin);
#include <Arduino.h>
//#include <FirebaseArduino.h>
#if defined(ESP32)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
//Provide the token generation process info.
#include "addons/TokenHelper.h"
//Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"
// Insert your network credentials
#define WIFI_SSID "Aditya"
#define WIFI_PASSWORD "12345678"
// Insert Firebase project API Key
#define API_KEY "AIzaSyA7xHQGu5io3qZog7dCsOO_8OHmcWNVQfc"
// Insert RTDB URLefine the RTDB URL */
#define DATABASE_URL "sih2022-22148-default-rtdb.firebaseio.com" 
//Define Firebase Data object
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
#define time_offset   3600 
unsigned long sendDataPrevMillis = 0;
float longitude = 0;
float latitude=0;
char Date[]  = "DATE: 00-00-2000";
char last_second, Second, Minute, Hour, Day, Month;
int Year;
bool signupOK = false;
String fulldate="DATE NOT AVAILABLE";
String fulltime="";
void setup(){
  Serial.begin(9600);
  SerialGPS.begin(9600);
  //Serial.begin(115200);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
    //showData();
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  /* Assign the api key (required) */
  config.api_key = API_KEY;
  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;
  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop(){

while (SerialGPS.available() > 0)
{
    if (gps.encode(SerialGPS.read()))
      showData();
  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println("GPS NOT DETECTED!");
   // while(true);
  }
 if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 15000 || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();
     showData();
   
 if (Firebase.RTDB.setFloat(&fbdo, "LGT_loc/lon", longitude)){
      Serial.println("PASSED");
      Serial.println("PATH: " + fbdo.dataPath());
      Serial.println("TYPE: " + fbdo.dataType());
    }
    else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }
  if (Firebase.RTDB.setFloat(&fbdo, "LGT_loc/lat", latitude)){
      Serial.println("PASSED");
      Serial.println("PATH: " + fbdo.dataPath());
      Serial.println("TYPE: " + fbdo.dataType());
    }
  else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }
    
 if (Firebase.RTDB.setString(&fbdo,"LGT_loc/date", fulldate)){
      Serial.println("PASSED");
      Serial.println("PATH: " + fbdo.dataPath());
      Serial.println("TYPE: " + fbdo.dataType());
    }
    else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }
// if(Firebase.RTDB.setString(&fbdo,"Time", longitude)){
//  Serial.println("PASSED");
//  Serial.println("PATH: " + fbdo.dataPath());
//  Serial.println("TYPE: " + fbdo.dataType());
// }
// else{
//  Serial.println("FAILED");
//  Serial.println("REASON: " + fbdo.errorReason());
// }
// if (Firebase.RTDB.setString(&fbdo,"Time", fulltime)){
//      Serial.println("PASSED");
//      Serial.println("PATH: " + fbdo.dataPath());
//      Serial.println("TYPE: " + fbdo.dataType());
//    }
//    else 
//    {
//      Serial.println("FAILED");
//      Serial.println("REASON: " + fbdo.errorReason());
//    }
    
    
  }
}
  
}


void showData()
{
  if (gps.location.isValid())
  {
    Serial.print("Latitude: ");
    Serial.println(gps.location.lat(), 6);
    latitude=gps.location.lat(), 6;
    Serial.print("Longitude: ");
    Serial.println(gps.location.lng(), 6);
    longitude=gps.location.lng(), 6;
    Serial.print("Altitude: ");
    Serial.println(gps.altitude.meters());
  }
  else
  {
    Serial.println("Location is not available");
  }
  
  Serial.print("Date: ");
  if (gps.date.isValid())
  {
    Serial.print(gps.date.month());
    Month=gps.date.month();
    Serial.print("/");
    Serial.print(gps.date.day());
    Day=gps.date.day();
    Serial.print("/");
    Serial.println(gps.date.year());
    Year=gps.date.year();
    fulldate=String(gps.date.day())+":"+String(gps.date.month())+":"+String(gps.date.year());
    Serial.println(fulldate);
    }
  else
  {
    Serial.println("Not Available");
  }

  Serial.print("Time: ");
  if (gps.time.isValid())
  {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(":");
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(":");
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
    Serial.print(".");
    if (gps.time.centisecond() < 10) Serial.print(F("0"));
    Serial.println(gps.time.centisecond());
    fulltime=String(gps.time.hour())+":"+String(gps.time.minute())+":"+String(gps.time.second());
  }
  else
  {
    Serial.println("Not Available");
  }

  Serial.println();
  Serial.println();
  delay(5000);
}
